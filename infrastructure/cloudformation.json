{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Infrastructure as Code (Terraform) Code Analysis and Alerting",
    "Parameters": {
        "Region": {
            "Type": "String",
            "Default": "us-west-2"
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/20"
            },
            "DevSubnet": {
                "CIDR": "10.0.0.0/24",
                "AZ": "us-west-2a"
            },
            "BuildSubnet": {
                "CIDR": "10.0.1.0/24",
                "AZ": "us-west-2a"
            }
        },
        "UserConfig": {
            "Login": {
                "Name": "student",
                "Pass": "password"
            }
        }
    },
    "Resources": {
        "JenkinsBuildInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "BuildInstanceProfile"
                },
                "ImageId": "ami-4e79ed36",
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "AWS::AccountId"
                },
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "BuildSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "SubnetId": {
                    "Ref": "BuildSubnet"
                },
                "Tags": [
                    {
                        "Key": "Type",
                        "Value": "Build"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | apt-key add -\n",
                                "sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'\n",
                                "apt-get update\n",
                                "apt-get install jenkins\n",
                                "apt-get install -y jenkins=2.107.2\n",
                                "iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080\n",
                                "sed -i 's/\\(-jar $JENKINS_WAR\\)/-Djenkins.install.runSetupWizard=false \\1/' /etc/init.d/jenkins\n",
                                "sleep 30\n",
                                "sed -i 's%<useSecurity>true</useSecurity>%<useSecurity>false</useSecurity>%' /var/lib/jenkins/config.xml\n",
                                "systemctl daemon-reload\n",
                                "systemctl restart jenkins\n",
                                "sleep 30\n",
                                "java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080 install-plugin Git snsnotify\n",
                                "echo \"<?xml version='1.1' encoding='UTF-8'?>\" >> /var/lib/jenkins/org.jenkinsci.plugins.snsnotify.AmazonSNSNotifier.xml\n",
                                "echo \"<org.jenkinsci.plugins.snsnotify.AmazonSNSNotifier_-DescriptorImpl plugin=\\\"snsnotify@1.13\\\">\" >> /var/lib/jenkins/org.jenkinsci.plugins.snsnotify.AmazonSNSNotifier.xml\n",
                                "echo \"  <defaultLocalCredential>true</defaultLocalCredential>\" >> /var/lib/jenkins/org.jenkinsci.plugins.snsnotify.AmazonSNSNotifier.xml\n",
                                "echo \"</org.jenkinsci.plugins.snsnotify.AmazonSNSNotifier_-DescriptorImpl>\" >> /var/lib/jenkins/org.jenkinsci.plugins.snsnotify.AmazonSNSNotifier.xml\n",
                                "systemctl restart jenkins\n",
                                "adduser git --disabled-password --gecos \"\"\n",
                                "mkdir -p /srv/git/lab.git\n",
                                "cd /srv/git/lab.git\n",
                                "git init --bare --shared\n",
                                "touch git-daemon-export-ok\n",
                                "echo '#!/bin/bash' > hooks/post-receive\n",
                                "echo 'curl -s http://localhost:8080/git/notifyCommit?url=http://localhost/lab.git' >> hooks/post-receive\n",
                                "chmod ugo+x hooks/post-receive\n",
                                "cd ..\n",
                                "chown git:git -R /srv/git\n",
                                "cat <<EOF > /etc/systemd/system/git-daemon.service\n",
                                "[Unit]\n",
                                "Description=Start Git Daemon\n",
                                "\n",
                                "[Service]\n",
                                "ExecStart=/usr/bin/git daemon --enable=receive-pack --reuseaddr --base-path=/srv/git/ /srv/git/\n",
                                "\n",
                                "Restart=always\n",
                                "RestartSec=500ms\n",
                                "\n",
                                "StandardOutput=syslog\n",
                                "StandardError=syslog\n",
                                "SyslogIdentifier=git-daemon\n",
                                "\n",
                                "User=git\n",
                                "Group=git\n",
                                "\n",
                                "[Install]\n",
                                "WantedBy=multi-user.target\n",
                                "EOF\n",
                                "systemctl enable git-daemon\n",
                                "systemctl start git-daemon\n",
                                "apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n",
                                "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n",
                                "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n",
                                "apt-get update\n",
                                "apt-get install -y docker-ce=18.03.0~ce-0~ubuntu\n",
                                "usermod -G jenkins,docker jenkins\n",
                                "systemctl restart jenkins\n",
                                "docker pull hashicorp/terraform:0.11.3\n",
                                "docker pull wata727/tflint:0.5.4\n"
                            ]
                        ]
                    }
                }
            }
        },
        "BuildEc2InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "build-instance-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:Describe*",
                                        "sns:Publish"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "RoleName": "build-instance-role"
            }
        },
        "BuildInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "BuildEc2InstanceRole"
                    }
                ]
            }
        },
        "Cloud9Env": {
            "Type": "AWS::Cloud9::EnvironmentEC2",
            "Properties": {
                "Description": "Lab Cloud9 Environment",
                "AutomaticStopTimeMinutes": 60,
                "InstanceType": "t2.micro",
                "OwnerArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":user/student"
                        ]
                    ]
                },
                "Name": "Lab",
                "SubnetId": {
                    "Ref": "DevSubnet"
                }
            }
        },
        "DevVpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Dev Vpc"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Dev"
                    }
                ]
            }
        },
        "DevSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DevVpc"
                },
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "DevSubnet",
                        "AZ"
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "DevSubnet",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Dev Subnet"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Dev"
                    }
                ]
            }
        },
        "DevInternetGatewayAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "DevVpc"
                },
                "InternetGatewayId": {
                    "Ref": "DevInternetGateway"
                }
            }
        },
        "DevPublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "DevVpc"
                }
            }
        },
        "DevPublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "DevPublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "DevInternetGateway"
                }
            }
        },
        "DevSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DevSubnet"
                },
                "RouteTableId": {
                    "Ref": "DevPublicRouteTable"
                }
            }
        },
        "DevInternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "BuildSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DevVpc"
                },
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "BuildSubnet",
                        "AZ"
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "BuildSubnet",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Build Subnet"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Dev"
                    }
                ]
            }
        },
        "BuildSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "BuildSubnet"
                },
                "RouteTableId": {
                    "Ref": "DevPublicRouteTable"
                }
            }
        },
        "BuildSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow incoming http, git, and ssh traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9418",
                        "ToPort": "9418",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "DevVpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Build Servers"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Dev"
                    }
                ]
            }
        },
        "Group": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "GroupName": "Students",
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "students-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloud9:DescribeEnvironments",
                                        "cloud9:ListEnvironments",
                                        "cloud9:GetUserPublicKey",
                                        "cloud9:GetUserSettings",
                                        "cloud9:GetEnvironmentConfig",
                                        "cloud9:UpdateUserSettings",
                                        "cloud9:ValidateEnvironmentName",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcs",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:RevokeSecurityGroupIngress",
                                        "iam:GetUser",
                                        "iam:ListUsers",
                                        "sns:List*",
                                        "sns:Get*",
                                        "sns:Check*",
                                        "sns:SetSubscriptionAttributes",
                                        "sns:Publish",
                                        "sns:DeleteTopic",
                                        "sns:CreateTopic",
                                        "sns:Unsubscribe",
                                        "sns:SetTopicAttributes",
                                        "sns:Subscribe",
                                        "sns:ConfirmSubscription",
                                        "sns:AddPermission",
                                        "sns:RemovePermission"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloud9:DescribeEnvironmentMemberships"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "Null": {
                                            "cloud9:UserArn": "true",
                                            "cloud9:EnvironmentId": "true"
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "ec2:Describe*"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow",
                                    "Condition": {
                                        "StringEquals": {
                                            "ec2:Region": "us-west-2"
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "health:DescribeEventAggregates",
                                        "iam:ListRoles"
                                    ],
                                    "Resource": [
                                        "*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "logs:GetLogEvents"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "User": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "LoginProfile": {
                    "Password": {
                        "Fn::FindInMap": [
                            "UserConfig",
                            "Login",
                            "Pass"
                        ]
                    }
                },
                "Path": "/",
                "Groups": [
                    "Students"
                ],
                "UserName": {
                    "Fn::FindInMap": [
                        "UserConfig",
                        "Login",
                        "Name"
                    ]
                }
            }
        }
    }
}